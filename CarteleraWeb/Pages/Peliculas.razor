@page "/cartelera"
@inject HttpClient Http
@using CarteleraLibrary.Models
@inject CarteleraLibrary.Controllers.PeliculasService peliculasService
@implements IDisposable
@inject Radzen.DialogService DialogService
@inject NavigationManager NavManager


<PageTitle>Cartelera de Peliculas</PageTitle>

<h1>Cartelera de Peliculas</h1>
<RadzenButton Click=@(args => Nueva())  Text="Nueva Pelicula" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
 <RadzenButton Click=@(args => GetPeliculas()) Icon="refresh" ButtonStyle="ButtonStyle.Light" />
@if (peliculas == null)
{
    <p><em>Cargando...</em></p>

}
else
{
    <RadzenDialog />
    <RadzenNotification />
      <div class="row px-3">

          </div>
    <RadzenDataList WrapItems="true" AllowPaging="false" Data="@peliculas" TItem="PeliculaDto">
        <Template Context="pelicula">
            <RadzenCard Style="width:300px;">
                  <RadzenImage Path=@pelicula.FullPoster() Class="rounded-circle float-left mr-3" Style="width: 80px; height: 80px;" />

                <div class="d-flex flex-row align-items-justified">
                    <div>
                        <h4 class="mb-0">@(pelicula.Titulo)</h4>
                        <div>@pelicula.Descripcion</div>
                        <div style="font-size: .8em">@(pelicula.Id), @(pelicula.ExternalId)</div>
                    </div>
                </div>
                <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                <div class="row">
<RadzenRating Disabled="false" ReadOnly="true" Stars="10"  Value="@pelicula.Puntuacion()"/>       
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
    <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" Count="count" PageSize="@pageSize" PageNumbersCount="10" PageChanged="@PageChanged" />
}

@code {
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int pageSize = 6;
    int count;
    private List<PeliculaDto>? peliculas;

    public Peliculas()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
        await GetPeliculas();
    }

    void PageChanged(PagerEventArgs args)
    {

    }



    public async Task Nueva()
    {

        await DialogService.OpenAsync<NuevaPelicula>($"Nueva Pelicula",
             new Dictionary<string, object>() {},
             new DialogOptions() { Width = "900px", Height = "650px", Resizable = true, Draggable = true });
        //NavManager.NavigateTo("/nuevaPelicula");

    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
    }

    async void  Close(dynamic result)
    {
        await GetPeliculas();
                StateHasChanged();

    }

     protected async Task GetPeliculas()
    {
          peliculas = await peliculasService.GetPeliculas(1);
    }



}
