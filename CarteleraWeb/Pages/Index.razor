@page "/"

@inject HttpClient Http
@using CarteleraLibrary.Models
@inject CarteleraLibrary.Controllers.PeliculasService peliculasService
@implements IDisposable


<PageTitle>Cartelera de Peliculas</PageTitle>

<h1>Top 20 de Peliculas</h1>

@if (peliculas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <RadzenDataList WrapItems="true" AllowPaging="false" Data="@peliculas" TItem="PeliculaApiDto">
        <Template Context="pelicula">
            <RadzenCard Style="width:300px;">
                 <RadzenImage Path="@pelicula.FullPoster()" Class="rounded-circle float-left mr-3" Style="width: 80px; height: 80px;" />
                <div class="d-flex flex-row align-items-center">
                    <div>
                        <h4 class="mb-0">@(pelicula.original_title)</h4>
                        <div>@pelicula.overview</div>
                        <div style="font-size: .8em">@(pelicula.id)</div>
                    </div>
                </div>
                <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                <div class="row">
<RadzenRating Disabled="false" ReadOnly="true" Stars="10"  Value="@pelicula.Puntuacion()"/>       
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
    <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" Count="count" PageSize="@pageSize" PageNumbersCount="10" PageChanged="@PageChanged" />
}


@code {
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int pageSize = 6;
    int count;
    private List<PeliculaApiDto>? peliculas;

    protected override async Task OnInitializedAsync()
    {
        peliculas = await peliculasService.GetPeliculasPopularesApi();
    }

    void PageChanged(PagerEventArgs args)
    {

    }

     public void Dispose()
    {

    }

}